solve(qr(A))
A
solve(A)
z <- matrix(rnorm(200 * 100), 200, 100)
S <- cov(z)
dim(S)
Sinv <- solve(S)
t <- z %*% Sinv
dim(t)
library(dplyr)
quad.naive <- function(z, S){
Sinv <- solve(S)
rowSums((z %*% Sinv) * z)
}
quad.naive(z, S) %>% summay
quad.naive(z, S) %>% summary
set.seed(2017-07-13)
z <- matrix(rnorm(200 * 100), 200, 100)
S <- cov(z)
quad.naive <- function(z, S){
Sinv <- solve(S)
rowSums((z %*% Sinv) * z)
}
library(dplyr)
quad.naive(z, S) %>% summary
set.seed(2017-07-13)
X <- matrix(rnorm(5000 * 100), 5000, 100)
y <- rnorm(5000)
library(microbenchmark)
microbenchmark(solve(t(X) %*% X) %*% t(X) %*% y)
set.seed(2017-07-13)
z <- matrix(rnorm(200 * 100), 200, 100)
S <- cov(z)
quad.naive <- function(z, S){
Sinv <- solve(S)
rowSums((z %*% Sinv) * z)
}
library(dplyr)
quad.naive(z, S) %>% summary
quad.chol <- function(z, S){
R <- chol(S)
v <- backsolve(R, t(z), transpose = TRUE)
colSums(v * v)
}
quad.chol(z, S) %>% summary
# Comparison
microbenchmark(quad.naive(z, S), quad.chol(z, S))
A
rowSums(A)
?backsolve
R <- chol(S)
dim(R)
v <- backsolve(R, t(z), transpose = T)
dim(v)
vector(3)
vector(3)
?vector
vector(length = 3)
numeric(length = 3)
numeric(3)
i%2
3 % 2
3 %% 2
1e5
1e5+1
x.star[1]
n <- 1e5
x.star <- numeric(n)
x.star[1]
?qchisq
rchisq(1, df = 1)
n <- 1e5
x.star <- numeric(n)
set.seed(3214)
x.star[1] <- rchisq(1, df = 1)
x.star[1]
# iterate
i=1
y <- rchisq(1, df = i)
y <- rchisq(1, df = x.star[i])
y
f <- function(x){
x/sigma^2 * exp(-x^2 / 2*sigma^2)
}
sigma <- 4
f(1)
f(10)
f(12)
f(3)
f(4)
f(5)
f(6)
f(1)
f(0.2)
f(0.1)
f(0.03)
f(0.00001)
f(0.0003)
f(0.02)
f(0.01)
f(0.025)
u <- runif(1)
ifelse(TRUE, 1, 2)
ifelse(FALSE, 1, 2)
f <- function(x){
x/sigma^2 * exp(-x^2 / 2*sigma^2)
}
set.seed(3214)
# initialization
x.star[1] <- rchisq(1, df = 1)
sigma <- 4
x <- x.star[i-1]
# iterate
i=2
x <- x.star[i-1]
y <- rchisq(1, df = x)
ratio <- (f(y) * dchisq(x, df = y)) / (f(x) * dchisq(y, df = x))
u <- runif(1)
x.star[i] <- ifelse(u <= ratio, y, x)
u <= ratio
# iterate
i=3
x <- x.star[i-1]
y <- rchisq(1, df = x)
ratio <- (f(y) * dchisq(x, df = y)) / (f(x) * dchisq(y, df = x))
u <- runif(1)
x.star[i] <- ifelse(u <= ratio, y, x)
x.star[1:5]
set.seed(3214)
x.star[1] <- rchisq(1, df = 1)
# iterate
for(i in 2:n){
x <- x.star[i-1]
y <- rchisq(1, df = x)
ratio <- (f(y) * dchisq(x, df = y)) / (f(x) * dchisq(y, df = x))
u <- runif(1)
x.star[i] <- ifelse(u <= ratio, y, x)
}
index <- 5000:n
n
n+1
index <- 10000:20000
y1 <- x.star[index]
plot(index, y1)
plot(index, y1, type = 'l')
# vis
index <- 10000:15000
> y1 <- x.star[index]
# vis
index <- 10000:15000
y1 <- x.star[index]
plot(index, y1)
plot(index, y1, type = 'l')
# vis
library(ggplot2)
ggplot(data = data.frame(x = x.star), aes(x = x)) +
geom_curve()
ggplot(data = data.frame(x = x.star), aes(x = x)) +
geom_point()
# vis
index <- 10000:15000
library(ggplot2)
ggplot(data = data.frame(x = index, y = x.star[index]), aes(x = x, y = y)) +
geom_point()
ggplot(data = data.frame(x = index, y = x.star[index]), aes(x = x, y = y)) +
geom_curve()
ggplot(data = data.frame(x = index, y = x.star[index]), aes(x = x, y = y)) +
geom_point() +
geom_line()
ggplot(data = data.frame(x = index, y = x.star[index]), aes(x = x, y = y)) +
geom_point() +
geom_line() +
theme_bw()
ggplot(data = data.frame(x = index, y = x.star[index]), aes(x = x, y = y)) +
geom_point() +
geom_line() +
theme_classic()
ggplot(data = data.frame(x = index, y = x.star[index]), aes(x = x, y = y)) +
geom_point() +
geom_line() +
theme_classic() +
xlab("iteration")
ggplot(data = data.frame(x = index, y = x.star[index]), aes(x = x, y = y)) +
geom_point() +
geom_line() +
theme_classic() +
xlab("Iteration") +
ylab("samples")
ggplot(data = data.frame(x = index, y = x.star[index]), aes(x = x, y = y)) +
geom_point() +
geom_line() +
theme_classic() +
xlab("Iteration") +
ylab("Sample")
n/2
?sample
# Final
x.final <- sample(x.star[n/2, n], size = 1000)
# Final
x.final <- sample(x.star[(n/2):n], size = 1000)
hist(x.final)
ggplot(data = data.frame(x = x.final), aes(x = x)) +
geom_density()
ggplot(data = data.frame(x = x.final), aes(x = x)) +
geom_histogram()
ggplot(data = data.frame(x = x.final), aes(x = x)) +
geom_histogram() +
theme_classic()
# Iteration
accept <- 0
set.seed(3214)
x.star[1] <- rchisq(1, df = 1)
# Iteration
accept <- 0
for(i in 2:n){
x <- x.star[i-1]
y <- rchisq(1, df = x)
ratio <- (f(y) * dchisq(x, df = y)) / (f(x) * dchisq(y, df = x))
u <- runif(1)
if(u <= ratio){
x.star[i] <- y
accept <- accept + 1
}
else{
x.star[i] <- x
}
}
# Vis
index <- 10000:15000
ggplot(data = data.frame(x = index, y = x.star[index]), aes(x = x, y = y)) +
geom_point() +
geom_line() +
theme_classic() +
xlab("Iteration") +
ylab("Sample")
# Final
x.final <- sample(x.star[(n/2):n], size = 1000)
ggplot(data = data.frame(x = x.final), aes(x = x)) +
geom_histogram() +
theme_classic()
accpet
accept
# Accept rate
accept / n
length(x.star)
# Accept rate
accept / (n-1)
rw.Metropolis <- function(n, sigma, x0, v){
# initialization
x.star <- numeric(n)
x.star[1] <- x0
# Iteration
accept <- 0
for(i in 2:n){
x <- x.star[i-1]
y <- rnorm(1, x, sigma)
ratio <- dt(y, v) / dt(x, v)
u <- runif(1)
if(u <= ratio){
x.star[i] <- y
accept <- accept + 1
}
else{
x.star[i] <- x
}
}
# Accept rate
Accept.rate <- accept / (n-1)
return(list(x.star, Accept.rate))
}
rw.Metropolis(n, 1, 25, 4)
sigma <- c(0.05, 0.5, 2, 16)
x0 <- 25
n <- 1e5
sigma <- c(0.05, 0.5, 2, 16)
x0 <- 25
res <- lapply(sigma, function(i){
rw.Metropolis(n, i, x0, v)
})
v <- 4
res <- lapply(sigma, function(i){
rw.Metropolis(n, i, x0, v)
})
res[1]
res[1]
res[[1]]
res[[1]][[2]]
res[[2]][[2]]
res[[3]][[2]]
res[[4]][[2]]
sigma <- c(0.5, 1, 2.5, 10)
n <- 1e5
sigma <- c(0.5, 1, 2.5, 10)
x0 <- 25
v <- 4
res <- lapply(sigma, function(i){
rw.Metropolis(n, i, x0, v)
})
res[[3]][[2]]
sapply(1:4, res[[i]][[2]])
sapply(1:4, function(i)res[[i]][[2]])
sapply(1:4, function(i) res[[i]][[2]])
# Final for sigma = 2.5
x.star <- res[[3]][[1]]
x.final <- sample(x.star[(n/2):n], size = 1000)
ggplot(data = data.frame(x = x.final), aes(x = x)) +
geom_histogram() +
theme_classic()
MCP <- function(x, lambda, gamma){
if(x <= gamma * lambda){
return(lambda * x - x ** 2 / (2 * gamma))
}
else{
return(0.5 * gamma * lambda ** 2)
}
}
MCP(2, 1, 2)
MCP(2, 1.2, 0.42)
cMCP <- function(x, lambda, gamma){
rs <- sapply(1:length(x), function(i){
MCP(x[i], lambda, gamma)
})
rs <- sum(rs)
rs <- MCP(rs, lambda, gamma)
}
cMCP(c(1,2,3), 0.22,3)
cMCP <- function(x, lambda, gamma){
rs <- sapply(1:length(x), function(i){
MCP(x[i], lambda, gamma)
})
rs <- sum(rs)
rs <- MCP(rs, lambda, gamma)
return(rs)
}
cMCP(c(1,2,3), 0.22,3)
x <- c(1,2,3)
# Derivative of MCP function
dMCP <- function(x, lambda, gamma){
rs <- lambda * max(0, 1 - x / (lambda * gamma))
return(rs)
}
# Derivative of composite MCP function
dcMCP <- function(x, ind, lambda, gamma){
A <- sapply(1:length(x), function(i){
MCP(x[i], lambda, gamma)
})
A <- sum(A)
A <- dMCP(A, lambda, gamma)
B <- dMCP(x[ind], lambda, gamma)
return(A * B)
}
dMCP(sum(x), 0.01,2)
dMCP(sum(x), 0.01,4)
dMCP(sum(x), 0.1,4)
sum(x)
dMCP(sum(x), 1, 4)
dMCP(sum(x), 2, 4)
x <- c(0.01, 0.02, 0.03)
dMCP(sum(x), 2, 4)
dMCP(sum(x), 0.1, 4)
dcMCP(x, 1, 0.1, 4)
sapply(1:length(x), function(i){
MCP(x[i], lambda, gamma)
})
lambda = 0.1
gamma = 4
sapply(1:length(x), function(i){
MCP(x[i], lambda, gamma)
})
dMCP(x[ind], lambda, gamma)
dMCP(x[1], lambda, gamma)
?MCP
rep(0,4)
cumsum(c(1,2,3))
cumsum(c(4,3,2,1))
t <- cumsum(c(4,3,2,1))
t[t >= 9] <- 0
max(t)
View(dMCP)
1e-3
beta
beta <- c(-0.2,0.4,2,1,-0.5)
beta
abs(beta)
tt <- matrix(c(2,1,4,2),2)
tt
sort(tt)
sort(tt, decreasing = )
sort(tt, decreasing = F)
sort(tt, decreasing = T)
args(dcMCP)
shiny::runApp('D:/Github Repo/Mastering-Software-Development-in-R/Shiny/4_submit')
get("iris")
runApp('D:/Github Repo/Mastering-Software-Development-in-R/Shiny/4_submit')
ls('package:datasets')
ls('package:datasets')[2]
names(ls('package:datasets')[2])
get(ls('package:datasets')[2])
data(ls('package:datasets')[2])
ls('package:datasets')[2]
name = ls('package:datasets')[2]
name
get(name)
data(name)
name
airmiles
name(airquality)
names(airquality)
names(ls('package:datasets')[4])
get(ls('package:datasets')[4])
names(get(ls('package:datasets')[4]))
names(get("iris"))
names(get("airquality"))
names(get("mtcars"))
shiny::runApp('D:/Github Repo/Mastering-Software-Development-in-R/Shiny/15_condition_panel')
runApp('D:/Github Repo/Mastering-Software-Development-in-R/Shiny/15_condition_panel')
runApp('D:/Github Repo/Mastering-Software-Development-in-R/Shiny/15_condition_panel')
runApp('D:/Github Repo/Mastering-Software-Development-in-R/Shiny/15_condition_panel')
runApp('D:/Github Repo/Mastering-Software-Development-in-R/Shiny/15_condition_panel')
runApp('D:/Github Repo/Mastering-Software-Development-in-R/Shiny/15_condition_panel')
runApp('D:/Github Repo/Mastering-Software-Development-in-R/Shiny/15_condition_panel')
runApp('D:/Github Repo/Mastering-Software-Development-in-R/Shiny/15_condition_panel')
runApp('D:/Github Repo/Mastering-Software-Development-in-R/Shiny/15_condition_panel')
runApp('D:/Github Repo/Mastering-Software-Development-in-R/Shiny/15_condition_panel')
runApp('D:/Github Repo/Mastering-Software-Development-in-R/Shiny/15_condition_panel')
setwd("D:/Github Repo/Mastering-Software-Development-in-R/Shiny/16_updateSelectInput_observeEvent")
shiny::runApp()
runApp()
runApp()
runApp('D:/Github Repo/Mastering-Software-Development-in-R/Shiny/17_reactiveValues')
runApp('D:/Github Repo/Mastering-Software-Development-in-R/Shiny/8_actionButton_isolate')
runApp('D:/Github Repo/Mastering-Software-Development-in-R/Shiny/17_reactiveValues')
names(diamonds)
library(datasets)
names(diamonds)
library(ggplot2)
names(diamonds)
names(diamonds)[[2]]
runApp('D:/Github Repo/Mastering-Software-Development-in-R/Shiny/18_grid_Layouts')
?column()
runApp('D:/Github Repo/Mastering-Software-Development-in-R/Shiny/18_grid_Layouts')
runApp('D:/Github Repo/Mastering-Software-Development-in-R/Shiny/18_grid_Layouts')
runApp('D:/Github Repo/Mastering-Software-Development-in-R/Shiny/18_grid_Layouts')
runApp('D:/Github Repo/Mastering-Software-Development-in-R/Shiny/18_grid_Layouts')
runApp('D:/Github Repo/Mastering-Software-Development-in-R/Shiny/18_grid_Layouts')
runApp('D:/Github Repo/Mastering-Software-Development-in-R/Shiny/18_grid_Layouts')
runApp('D:/Github Repo/Mastering-Software-Development-in-R/Shiny/18_grid_Layouts')
runApp('D:/Github Repo/Mastering-Software-Development-in-R/Shiny/18_grid_Layouts')
runApp('D:/Github Repo/Mastering-Software-Development-in-R/Shiny/18_grid_Layouts')
runApp('D:/Github Repo/Mastering-Software-Development-in-R/Shiny/18_grid_Layouts')
runApp('D:/Github Repo/Mastering-Software-Development-in-R/Shiny/18_grid_Layouts')
runApp('D:/Github Repo/Mastering-Software-Development-in-R/Shiny/18_grid_Layouts')
runApp('D:/Github Repo/Mastering-Software-Development-in-R/Shiny/18_grid_Layouts')
runApp('D:/Github Repo/Mastering-Software-Development-in-R/Shiny/18_grid_Layouts')
runApp('D:/Github Repo/Mastering-Software-Development-in-R/Shiny/18_grid_Layouts')
runApp('D:/Github Repo/Mastering-Software-Development-in-R/Shiny/18_grid_Layouts')
runApp('D:/Github Repo/Mastering-Software-Development-in-R/Shiny/18_grid_Layouts')
runApp('D:/Github Repo/Mastering-Software-Development-in-R/Shiny/18_grid_Layouts')
runApp('D:/Github Repo/Mastering-Software-Development-in-R/Shiny/18_grid_Layouts')
runApp('D:/Github Repo/Mastering-Software-Development-in-R/Shiny/18_grid_Layouts')
runApp('D:/Github Repo/Mastering-Software-Development-in-R/Shiny/18_grid_Layouts')
aes()
?aes()
?aes_string
runApp('D:/Github Repo/Mastering-Software-Development-in-R/Shiny/18_grid_Layouts')
runApp('D:/Github Repo/Mastering-Software-Development-in-R/Shiny/18_grid_Layouts')
runApp('D:/Github Repo/Mastering-Software-Development-in-R/Shiny/18_grid_Layouts')
runApp('D:/Github Repo/Mastering-Software-Development-in-R/Shiny/18_grid_Layouts')
runApp('D:/Github Repo/Mastering-Software-Development-in-R/Shiny/18_grid_Layouts')
runApp('D:/Github Repo/Mastering-Software-Development-in-R/Shiny/18_grid_Layouts')
runApp('D:/Github Repo/Mastering-Software-Development-in-R/Shiny/18_grid_Layouts')
runApp('D:/Github Repo/Mastering-Software-Development-in-R/Shiny/18_grid_Layouts')
runApp('D:/Github Repo/Mastering-Software-Development-in-R/Shiny/18_grid_Layouts')
runApp('D:/Github Repo/Mastering-Software-Development-in-R/Shiny/18_grid_Layouts')
runApp('D:/Github Repo/Mastering-Software-Development-in-R/Shiny/18_grid_Layouts')
vars()
?vars()
"Species"
get("Species")
iris[,"Species"]
s = "Species"
iris[,s]
runApp('D:/Github Repo/Mastering-Software-Development-in-R/Shiny/18_grid_Layouts')
runApp('D:/Github Repo/Mastering-Software-Development-in-R/Shiny/18_grid_Layouts')
runApp('D:/Github Repo/Mastering-Software-Development-in-R/Shiny/18_grid_Layouts')
iris[,NULL]
runApp('D:/Github Repo/Mastering-Software-Development-in-R/Shiny/18_grid_Layouts')
runApp('D:/Github Repo/Mastering-Software-Development-in-R/Shiny/18_grid_Layouts')
runApp('D:/Github Repo/Mastering-Software-Development-in-R/Shiny/18_grid_Layouts')
runApp('D:/Github Repo/Mastering-Software-Development-in-R/Shiny/18_grid_Layouts')
runApp('D:/Github Repo/Mastering-Software-Development-in-R/Shiny/18_grid_Layouts')
runApp('D:/Github Repo/Mastering-Software-Development-in-R/Shiny/18_grid_Layouts')
runApp('D:/Github Repo/Mastering-Software-Development-in-R/Shiny/18_grid_Layouts')
runApp('D:/Github Repo/Mastering-Software-Development-in-R/Shiny/18_grid_Layouts')
runApp('D:/Github Repo/Mastering-Software-Development-in-R/Shiny/18_grid_Layouts')
runApp('D:/Github Repo/Mastering-Software-Development-in-R/Shiny/18_grid_Layouts')
vars("s")
runApp('D:/Github Repo/Mastering-Software-Development-in-R/Shiny/18_grid_Layouts')
runApp('D:/Github Repo/Mastering-Software-Development-in-R/Shiny/18_grid_Layouts')
runApp('D:/Github Repo/Mastering-Software-Development-in-R/Shiny/18_grid_Layouts')
runApp('D:/Github Repo/Mastering-Software-Development-in-R/Shiny/18_grid_Layouts')
runApp('D:/Github Repo/Mastering-Software-Development-in-R/Shiny/18_grid_Layouts')
names(mtcars)
ggplot(data = mtcars, aes = mpg) + geom_histogram(bins = 30)
ggplot(data = mtcars, aes(x = mpg)) + geom_histogram(bins = 30)
ggplot(data = mtcars, aes(x = mpg)) + geom_histogram(bins = as.numeric("30"))
runApp('D:/Github Repo/Mastering-Software-Development-in-R/Shiny/19_Navbar_Layout')
?sliderInput
runApp('D:/Github Repo/Mastering-Software-Development-in-R/Shiny/19_Navbar_Layout')
runApp('D:/Github Repo/Mastering-Software-Development-in-R/Shiny/19_Navbar_Layout')
?geom_histogram
runApp('D:/Github Repo/Mastering-Software-Development-in-R/Shiny/19_Navbar_Layout')
